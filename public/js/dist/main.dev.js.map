{"version":3,"sources":["main.js"],"names":["onSubmit","e","preventDefault","document","querySelector","textContent","src","prompt","value","size","alert","generateImageRequest","showSpinner","fetch","method","headers","body","JSON","stringify","response","ok","removeSpinner","Error","json","data","imageUrl","classList","add","remove","addEventListener"],"mappings":";;AAAA,SAASA,QAAT,CAAkBC,CAAlB,EAAqB;AACjBA,EAAAA,CAAC,CAACC,cAAF;AAEAC,EAAAA,QAAQ,CAACC,aAAT,CAAuB,MAAvB,EAA+BC,WAA/B,GAA6C,EAA7C;AACAF,EAAAA,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiCE,GAAjC,GAAuC,EAAvC;AAEA,MAAMC,MAAM,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,SAAvB,EAAkCI,KAAjD;AACA,MAAMC,IAAI,GAAGN,QAAQ,CAACC,aAAT,CAAuB,OAAvB,EAAgCI,KAA7C;;AAEA,MAAID,MAAM,KAAK,EAAf,EAAmB;AACjBG,IAAAA,KAAK,CAAC,sBAAD,CAAL;AACA;AACD;;AAEDC,EAAAA,oBAAoB,CAACJ,MAAD,EAASE,IAAT,CAApB;AACD;;AAED,SAAeE,oBAAf,CAAoCJ,MAApC,EAA4CE,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIG,UAAAA,WAAW;AAFf;AAAA,0CAI2BC,KAAK,CAAC,uBAAD,EAA0B;AACpDC,YAAAA,MAAM,EAAE,MAD4C;AAEpDC,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT,aAF2C;AAKpDC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBX,cAAAA,MAAM,EAANA,MADmB;AAEnBE,cAAAA,IAAI,EAAJA;AAFmB,aAAf;AAL8C,WAA1B,CAJhC;;AAAA;AAIUU,UAAAA,QAJV;;AAAA,cAeSA,QAAQ,CAACC,EAflB;AAAA;AAAA;AAAA;;AAgBMC,UAAAA,aAAa;AAhBnB,gBAiBY,IAAIC,KAAJ,CAAU,mCAAV,CAjBZ;;AAAA;AAAA;AAAA,0CAoBuBH,QAAQ,CAACI,IAAT,EApBvB;;AAAA;AAoBUC,UAAAA,IApBV;AAqBI;AAEMC,UAAAA,QAvBV,GAuBqBD,IAAI,CAACA,IAvB1B;AAyBIrB,UAAAA,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiCE,GAAjC,GAAuCmB,QAAvC;AAEAJ,UAAAA,aAAa;AA3BjB;AAAA;;AAAA;AAAA;AAAA;AA6BIlB,UAAAA,QAAQ,CAACC,aAAT,CAAuB,MAAvB,EAA+BC,WAA/B;;AA7BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiCA,SAASO,WAAT,GAAuB;AACrBT,EAAAA,QAAQ,CAACC,aAAT,CAAuB,UAAvB,EAAmCsB,SAAnC,CAA6CC,GAA7C,CAAiD,MAAjD;AACD;;AAED,SAASN,aAAT,GAAyB;AACvBlB,EAAAA,QAAQ,CAACC,aAAT,CAAuB,UAAvB,EAAmCsB,SAAnC,CAA6CE,MAA7C,CAAoD,MAApD;AACD;;AAEDzB,QAAQ,CAACC,aAAT,CAAuB,aAAvB,EAAsCyB,gBAAtC,CAAuD,QAAvD,EAAiE7B,QAAjE","sourcesContent":["function onSubmit(e) {\n    e.preventDefault();\n  \n    document.querySelector('.msg').textContent = '';\n    document.querySelector('#image').src = '';\n  \n    const prompt = document.querySelector('#prompt').value;\n    const size = document.querySelector('#size').value;\n  \n    if (prompt === '') {\n      alert('Please add some text');\n      return;\n    }\n  \n    generateImageRequest(prompt, size);\n  }\n  \n  async function generateImageRequest(prompt, size) {\n    try {\n      showSpinner();\n  \n      const response = await fetch('/openai/generateimage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          prompt,\n          size,\n        }),\n      });\n  \n      if (!response.ok) {\n        removeSpinner();\n        throw new Error('That image could not be generated');\n      }\n  \n      const data = await response.json();\n      // console.log(data);\n  \n      const imageUrl = data.data;\n  \n      document.querySelector('#image').src = imageUrl;\n  \n      removeSpinner();\n    } catch (error) {\n      document.querySelector('.msg').textContent = error;\n    }\n  }\n  \n  function showSpinner() {\n    document.querySelector('.spinner').classList.add('show');\n  }\n  \n  function removeSpinner() {\n    document.querySelector('.spinner').classList.remove('show');\n  }\n  \n  document.querySelector('#image-form').addEventListener('submit', onSubmit);"],"file":"main.dev.js"}